[*
  this is a comment
*]

[* sum type/enum taking a type variable 'a' *]
type option(a) :=
  | Some(a)
  | None

[* product type/struct, also with a variable *]
type list(a) :=
  { data : a;
    next : option(&(list(a)))
  }

[* type without any type args *]
type unused_data := { unused_data : unit }

[* declares a function that is linked already *]
implicit_extern print_endline : &char -> c_int = "puts"

let do_nothing(a) := ()

let option_iter(
  a,
  [* can optionally declare the type of arguments
     '_' in type expressions means a new type variable
     (rn you can't use a or b or 'a etc.)
  *]
  f : _ -> unit
) := {
  [* pattern matching *]
  match a with
  | Some(a) -> f(a)
  | None -> ()
}

let list_option_iter(a, f) := {

  option_iter(a, do_nothing);

  match a with
  | None -> ()
  | Some(a) -> {
        [* deref, same as C *]
        f((*a).data);

        [* postfix deref, equivalent to the above *]
        f(a^.data);

	list_option_iter(a^.next, f)
    }
}

let main() : [* optional type declaration of return type *] i64 = {
  let first := #list {
    data : "first";
    next : None
  };

  [* type declarations can be used in the same way in functions *]
  let second : list(&char) = #list {
    data : "second";
    next : Some(&first)
  };

  [* _ name == not bound and such *]
  let _ := 1;

  [* these block thingos are also an expression *]
  let unused := {
    do_nothing(1);
    second.next
  };

  list_option_iter(Some(&second), print_endline);
  0
}
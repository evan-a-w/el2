open Types

type result_option(res, err) :=
   [* since Nothing is the first variant,
      using '?' operator returns if result or error.
   *]
   | Nothing
   | Result(res)
   | Error(err)

[*
let main() := stdin_lex_loop()
*]

let stdin_lex_loop() := {
    let t := of_fd("stdin", Stdlib.stdin);
    loop match next(&t) with
      | Nothing -> break(())
      | Error(e, loc) -> {
            Stdlib.print_string("Error at ");
            print_location(&loc);
            Stdlib.print_string(": ");
            Stdlib.print_string(e);
            Stdlib.print_string("\n");
            break(())
        }
      | Result(tok, loc) -> {
            print_location(&loc);
            Stdlib.print_string(": ");
            Token.print(tok);
            Stdlib.print_string("\n");
            ()
        };
    0
}

let next(t) := {
    match t^.prev with
    | None -> {
        let res := lex(t);
        Vector.clear(&t^.token_buffer);
        res
      }
    | Some(prev) -> {
        t^.prev = None;
        Result(prev)
    }
}

let peek(t) := {
    match t^.prev with
    | Some(prev) -> Result(prev)
    | None -> {
        match next(t) with
        | Nothing -> Nothing
        | Error(e) -> Error(e)
        | Result(token) -> {
            t^.prev = Some(token);
            Result(token)
        }
    }
}

let lex(t) := {
    loop {
       let loc := t^.current_location;
       match eat_whitespace_and_comment(t) with
       | (Result(token), _) -> return(Result(token, loc))
       | (Error(e), _) -> return(Error(e, loc))
       | (Nothing, true) -> ()
       | (Nothing, false) -> break(())
    };
    add_loc(t, get_ident_or_keyword)?;
    add_loc(t, get_symbol_not_minus_or_arrow)?;
    add_loc(t, get_upper_ident)?;
    add_loc(t, get_char)?;
    add_loc(t, get_string)?;
    add_loc(t, get_int_float_minus_or_arrow)?;
    Nothing
}

type t(input_state) := {
    intern : Intern.t;
    input_state : input_state;
    input_next : &input_state -> option(char);
    prev_char : option(char);
    current_location : location;
    token_buffer : Vector.t(char);
    prev : option((Token.t, location))
}

let file_input_next(fd : &(&file)) : option(char) = {
    let c := unsafe_cast(Stdlib.fgetc(fd^));
    if c < 0 then None else Some(unsafe_cast(c))
}

let try_of_file(filename : &char) : option(t(&file)) = {
    let input_state := Stdlib.fopen(filename, "r");
    if input_state == null then None else Some(of_fd(filename, input_state))
}

let of_fd(filename, fd : &file) : t(&file) =
    #t {
        input_state : fd;
        input_next : file_input_next;
        intern : Intern.create();
        current_location : initial_location(filename);
        token_buffer : Vector.create();
        prev_char : None;
        prev : None
    }

type location := {
    file : &char;
    line : i64;
    column : i64
}


let add_loc(t, f) := {
    let loc := t^.current_location;
    match f(t) with
    | Result(token) -> Result(token, loc)
    | Error(e) -> Error(e, loc)
    | Nothing -> Nothing
}

let print_location(loc) := {
    Stdlib.print_string("line ");
    Stdlib.print_int(loc^.line);
    Stdlib.print_string(", column ");
    Stdlib.print_int(loc^.column);
    Stdlib.print_string(" in ");
    Stdlib.print_string(loc^.file)
}

let incr_location(loc, c) := {
    match c with
    | '\n' -> { loc^.line = loc^.line + 1; loc^.column = 0; () }
    | _ -> { loc^.column = loc^.column + 1; () }
}

let initial_location(file) := #location {
    file;
    line : 1;
    column : 0
}

let next_char(t) :=
    match t^.prev_char with
    | None -> {
          let o := t^.input_next(&t^.input_state);
          match o with
          | Some(c) -> incr_location(&t^.current_location, c)
          | None -> ();
          o
      }
    | Some(prev_char) -> {
        t^.prev_char = None;
        Some(prev_char)
    }

let peek_char(t) :=
    match t^.prev_char with
    | Some(prev_char) -> Some(prev_char)
    | None -> {
        let c := next_char(t);
        t^.prev_char = c;
        c
    }

let eat_whitespace_char(t) : bool = {
  match peek_char(t) with
  | None -> false
  | Some(c) -> {
        if c == " "[0] || c == "\t"[0] || c == "\n"[0] || c == "\r"[0] then {
            next_char(t); true
        } else false
    }
}

let add_next_to_buffer(t) := {
    match next_char(t) with
    | None -> false
    | Some(c) -> { add_to_buffer(t, c); true }
}

let add_one_literal_char_to_buffer(t) := {
    match peek_char(t) with
    | None -> false
    | Some('\\') -> {
        add_next_to_buffer(t);
        match peek_char(t) with
        | None -> false
        | Some('n') -> add_next_to_buffer(t)
        | Some('t') -> add_next_to_buffer(t)
        | Some('\'') -> add_next_to_buffer(t)
        | Some('"') -> add_next_to_buffer(t)
        | Some('\\') -> add_next_to_buffer(t)
        | Some(_) -> false
      }
    | Some(c) -> add_next_to_buffer(t)
}

let get_char(t) := {
    match peek_char(t) with
    | None -> Nothing
    | Some('\'') -> {
          next_char(t);
          in_char(t)
      }
    | Some(_) -> Nothing
}

let in_char(t) := {
    match peek_char(t) with
    | None -> Error("Unterminated character literal")
    | Some('\'') -> Error("Empty character literal")
    | Some(c) -> {
          add_one_literal_char_to_buffer(t);
          add_to_buffer(t, "\0"[0]);
          match next_char(t) with
          | None -> Error("Unterminated character literal")
          | Some('\'') -> Result(Token.Literal(Token.Char(intern_and_clear_buffer(t))))
          | Some(_) -> Error("Character literal contains more than one character")
      }
}

let in_string(t) := {
    loop match peek_char(t) with
    | Some('"') -> { next_char(t); break(()) }
    | Some(c) -> { add_one_literal_char_to_buffer(t); () }
    | None -> return(Error("Unterminated string literal"));
    add_to_buffer(t, "\0"[0]);
    Result(Token.Literal(Token.String(intern_and_clear_buffer(t))))
}

let get_string(t) := {
    match peek_char(t) with
    | None -> Nothing
    | Some('"') -> {
          next_char(t);
          in_string(t)
      }
    | Some(_) -> Nothing
}

let in_comment(t, depth) := {
    match next_char(t) with
    | None -> Error("Unterminated comment")
    | Some('*') -> {
          match next_char(t) with
          | Some(']') -> {
                if depth == 0 then Nothing
                else in_comment(t, depth - 1)
            }
          | _ -> in_comment(t, depth)
      }
    | Some('[') -> {
          match next_char(t) with
          | Some('*') -> in_comment(t, depth + 1)
          | _ -> in_comment(t, depth)
      }
    | _ -> in_comment(t, depth)
}

let eat_whitespace_and_comment(t) := {
    eat_whitespace(t);
    match peek_char(t) with
    | Some('[') -> {
          next_char(t);
          match peek_char(t) with
          | Some('*') -> { next_char(t); (in_comment(t, 0), true) }
          | _ -> (Result(Token.Control_symbol(Token.Lbrack)), true)
      }
    | _ -> (Nothing, false)
}

let eat_whitespace(t) := loop { if false == eat_whitespace_char(t) then break(()) }

let dig_to_char(d : i64) : char =
    if d >= 0 && d <= 9 then unsafe_cast(unsafe_cast("0"[0]) + d) else "0"[0]

let get_digit(t) := {
    match peek_char(t) with
    | None -> None
    | Some(c) -> {
        if (unsafe_cast(c) : i64) >= unsafe_cast("0"[0])
        && (unsafe_cast(c) : i64) <= unsafe_cast("9"[0]) then {
            next_char(t);
            Some(c)
        } else None
    }
}

let add_to_buffer(t, c) :=
    Vector.push(&t^.token_buffer, c)

let intern_and_clear_buffer(t) := {
    Vector.push(&t^.token_buffer, "\0"[0]);
    let res := Intern.intern(&t^.intern, t^.token_buffer.Vector.arr);
    Vector.clear(&t^.token_buffer);
    res
}

let populate_pos_int(t) := {
    match get_digit(t) with
    | None -> false
    | Some(c) -> {
        add_to_buffer(t, c);
        loop {
            match get_digit(t) with
            | None -> break(())
            | Some(c) -> add_to_buffer(t, c)
        };
        true
    }
}

let get_and_populate_minus(t) := {
    if populate_char(t, "-"[0]) then {
        Result(Token.Operator_symbol(Token.Minus))
    } else Nothing
}

let populate_char(t, c) := {
    match peek_char(t) with
    | None -> false
    | Some(x) -> {
        if c == x then {
            add_to_buffer(t, x);
            next_char(t);
            true
        } else false
    }
}

let get_int_float_minus_or_arrow(t) := {
    let minus := get_and_populate_minus(t);
    match minus with
    | Result(_) -> {
          if populate_char(t, ">"[0]) then return(Result(Token.Control_symbol(Token.Arrow)))
      }
    | _ -> ();
    match populate_pos_int(t) with
    | false -> minus
    | true -> {
        match populate_char(t, "."[0]) with
        | false -> Result(Token.Literal(Token.Int(intern_and_clear_buffer(t))))
        | true -> {
              populate_pos_int(t);
              Result(Token.Literal(Token.Float(intern_and_clear_buffer(t))))
          }
      }
}

let ci(c : char) : i64 = unsafe_cast(c)

let ident_body_char(c) := {
    if ci(c) >= ci("a"[0]) && ci(c) <= ci("z"[0]) then true
    else if ci(c) >= ci("A"[0]) && ci(c) <= ci("Z"[0]) then true
    else if ci(c) >= ci("0"[0]) && ci(c) <= ci("9"[0]) then true
    else if c == "_"[0] then true
    else false
}

let ident_start_char(c) := {
    if ci(c) >= ci("a"[0]) && ci(c) <= ci("z"[0]) then true
    else if c == "_"[0] then true
    else false
}

let upper_ident_start_char(c) := {
    if ci(c) >= ci("A"[0]) && ci(c) <= ci("Z"[0]) then true
    else false
}

let get_many(t, start_f, body_f) := {
    match peek_char(t) with
    | None -> None
    | Some(c) -> {
        if start_f(c) then {
            add_to_buffer(t, c);
            next_char(t);
            loop {
                match peek_char(t) with
                | None -> break(Some(intern_and_clear_buffer(t)))
                | Some(c) -> {
                    if body_f(c) then {
                        add_to_buffer(t, c);
                        next_char(t);
                        ()
                    } else break(Some(intern_and_clear_buffer(t)))
                }
            }
        } else None
    }
}

let get_ident(t) := get_many(t, ident_start_char, ident_body_char)
let get_upper_ident_(t) := get_many(t, upper_ident_start_char, ident_body_char)

let is_symbol_char(c) := {
    [* ->=+!&|*^/%()[]{}.;,#: *]
    let s := "->=+!&|*^/%()[]{}.;,#:";
    let i := 0;
    loop {
        if s[i] == "\0"[0] then break(false);
        if c == s[i] then break(true);
        i = i + 1
    }
}

let get_symbol_string(t) := get_many(t, is_symbol_char, is_symbol_char)

let get_upper_ident(t) := {
    match get_upper_ident_(t) with
    | None -> Nothing
    | Some(ident) -> Result(Token.Literal(Token.Upper_ident(ident)))
}

let get_ident_or_keyword(t) := {
    let ident := get_ident(t);
    match ident with
    | None -> Nothing
    | Some("null") -> Result(Token.Literal(Token.Null))
    | Some("size_of") -> Result(Token.Keyword(Token.Size_of))
    | Some("return") -> Result(Token.Keyword(Token.Return))
    | Some("if") -> Result(Token.Keyword(Token.If))
    | Some("else") -> Result(Token.Keyword(Token.Else))
    | Some("then") -> Result(Token.Keyword(Token.Then))
    | Some("match") -> Result(Token.Keyword(Token.Match))
    | Some("with") -> Result(Token.Keyword(Token.With))
    | Some("let") -> Result(Token.Keyword(Token.Let))
    | Some("type") -> Result(Token.Keyword(Token.Type))
    | Some("extern") -> Result(Token.Keyword(Token.Extern))
    | Some("implicit_extern") -> Result(Token.Keyword(Token.Implicit_extern))
    | Some("assert") -> Result(Token.Keyword(Token.Assert))
    | Some("open") -> Result(Token.Keyword(Token.Open))
    | Some("open_file") -> Result(Token.Keyword(Token.Open_file))
    | Some("loop") -> Result(Token.Keyword(Token.Loop))
    | Some("break") -> Result(Token.Keyword(Token.Break))
    | Some("module") -> Result(Token.Keyword(Token.Module))
    | Some("unsafe_cast") -> Result(Token.Keyword(Token.Unsafe_cast))
    | Some("false") -> Result(Token.Literal(Token.Bool(false)))
    | Some("true") -> Result(Token.Literal(Token.Bool(true)))
    | Some(ident) -> Result(Token.Literal(Token.Ident(ident)))
}

let get_symbol_not_minus_or_arrow(t) := {
    match peek_char(t) with
    | None -> Nothing
    | Some('.') -> { next_char(t); Result(Token.Control_symbol(Token.Dot)) }
    | Some(',') -> { next_char(t); Result(Token.Control_symbol(Token.Comma)) }
    | Some('(') -> { next_char(t); Result(Token.Control_symbol(Token.Lparen)) }
    | Some(')') -> { next_char(t); Result(Token.Control_symbol(Token.Rparen)) }
    | Some('[') -> { next_char(t); Result(Token.Control_symbol(Token.Lbrack)) }
    | Some(']') -> { next_char(t); Result(Token.Control_symbol(Token.Rbrack)) }
    | Some('}') -> { next_char(t); Result(Token.Control_symbol(Token.Rbrace)) }
    | Some(';') -> { next_char(t); Result(Token.Control_symbol(Token.Semicolon)) }
    | Some(':') -> { next_char(t); Result(Token.Control_symbol(Token.Colon)) }
    | Some('#') -> { next_char(t); Result(Token.Control_symbol(Token.Hash)) }
    | Some('+') -> { next_char(t); Result(Token.Operator_symbol(Token.Plus)) }
    | Some('*') -> { next_char(t); Result(Token.Operator_symbol(Token.Times)) }
    | Some('%') -> { next_char(t); Result(Token.Operator_symbol(Token.Rem)) }
    | Some('^') -> { next_char(t); Result(Token.Operator_symbol(Token.Caret)) }
    | Some('{') -> {
        next_char(t);
        match peek_char(t) with
        | Some('|') -> { next_char(t); Result(Token.Control_symbol(Token.Lbracepipe)) }
        | _ -> Result(Token.Control_symbol(Token.Lbrace))
      }
    | Some('|') -> {
        next_char(t);
        match peek_char(t) with
        | Some('}') -> { next_char(t); Result(Token.Control_symbol(Token.Piperbrace)) }
        | Some('|') -> { next_char(t); Result(Token.Operator_symbol(Token.Or)) }
        | _ -> Result(Token.Control_symbol(Token.Pipe))
      }
    | Some('=') -> {
        next_char(t);
        match peek_char(t) with
        | Some('=') -> { next_char(t); Result(Token.Operator_symbol(Token.Eq)) }
        | _ -> Result(Token.Operator_symbol(Token.Equals))
      }
    | Some('!') -> {
        next_char(t);
        match peek_char(t) with
        | Some('=') -> { next_char(t); Result(Token.Operator_symbol(Token.Ne)) }
        | _ -> Error("Unexpected character after '!'")
      }
    | Some('>') -> {
        next_char(t);
        match peek_char(t) with
        | Some('=') -> { next_char(t); Result(Token.Operator_symbol(Token.Ge)) }
        | _ -> Result(Token.Operator_symbol(Token.Gt))
      }
    | Some('<') -> {
        next_char(t);
        match peek_char(t) with
        | Some('=') -> { next_char(t); Result(Token.Operator_symbol(Token.Le)) }
        | _ -> Result(Token.Operator_symbol(Token.Lt))
      }
    | Some('&') -> {
        next_char(t);
        match peek_char(t) with
        | Some('&') -> { next_char(t); Result(Token.Operator_symbol(Token.And)) }
        | _ -> Result(Token.Operator_symbol(Token.Amp))
      }
    | Some(_) -> Nothing
}

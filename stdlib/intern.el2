type t := { map : Hashmap.t(&char, &char) }

let create() := #t { map : Hashmap.create(Hash.string_hash, Hash.string_equal) }

let intern(t, x) : &char = {
    match Hashmap.find(&t^.map, x) with
    | Types.Some(y) -> y
    | Types.None -> {
        let y := Stdlib.strdup(x);
        let _ := Hashmap.insert(&t^.map, y, y);
        y
    }
    
}

let destroy(t) := {
      let iterator := Hashmap.iterator(&t^.map);
      loop {
          match Hashmap.iterator_next(&iterator) with
          | Types.Some((k, v)) -> Stdlib.free(k)
          | Types.None -> break(())
      };
      Hashmap.destroy(&t^.map)
}

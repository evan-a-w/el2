type file := unit

[* TODO: make types more accurate *]

implicit_extern malloc : i64 -> &unit = "malloc"
implicit_extern calloc : (i64, i64) -> &unit = "calloc"
implicit_extern c_realloc : (&unit, i64) -> &unit = "realloc"
implicit_extern c_free : &unit -> unit = "free"

implicit_extern strcpy : (&char, &char) -> &char = "strcpy"
implicit_extern strlen : &char -> i64 = "strlen"
implicit_extern strcmp : (&char, &char) -> c_int = "strcmp"

implicit_extern c_memset : (&unit, c_int, i64) -> unit = "memset"
implicit_extern c_memcpy : (&unit, &unit, i64) -> unit = "memcpy"
implicit_extern c_memcmp : (&unit, &unit, i64) -> unit = "memcmp"

implicit_extern exit : c_int -> unit = "exit"

implicit_extern fopen : (&char, &char) -> &file = "fopen"
implicit_extern fclose : &file -> c_int = "fclose"

implicit_extern fgetc : &file -> c_int = "fgetc"
implicit_extern fgets : (&char, c_int, &file) -> &char = "fgets"
implicit_extern fputs : (&char, &file) -> c_int = "fputs"
implicit_extern fputc : (c_int, &file) -> c_int = "fputc"
implicit_extern fread : (&unit, i64, i64, &file) -> i64 = "fread"
implicit_extern fwrite : (&unit, i64, i64, &file) -> i64 = "fwrite"

implicit_extern stdin : &file = "stdin"
implicit_extern stdout : &file = "stdout"
implicit_extern stderr : &file = "stderr"

implicit_extern srand : i64 -> unit = "srand"
implicit_extern rand : unit -> i64 = "rand"

implicit_extern print_endline : &char -> c_int = "puts"

[* the type '_' is a new type variable each time *]
let alloc(sz) : &_ = ptr_cast(malloc(sz))
let realloc(a, sz) : &_ = ptr_cast(realloc(ptr_cast(a), sz))
let alloc_zeroed(num_elements, element_sz) : &_ = ptr_cast(calloc(num_elements, element_sz))

let free(a : &_) := c_free(ptr_cast(a))

let ptr_cast(x : &_) : &_ = unsafe_cast(x)

let max(a, b) := if a > b then a else b
let min(a, b) := if a < b then a else b

let print_int(i) := {
  let curr := i % 10;

  if i / 10 > 0 then print_int(i / 10);

  [* for some reason, chars are a bit borked in parsing so i do this jank string thing *]
  fputc(unsafe_cast(curr + unsafe_cast("0"[0])), stdout)
}

let print_string(s : &char) := {
  fputs(s, stdout)
}

let memcpy(dest : &_, src : &_, sz : i64) := c_memcpy(unsafe_cast(dest), unsafe_cast(src), sz)
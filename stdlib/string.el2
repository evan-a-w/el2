type t := Vector.t(char)
type string := t

module Slice := {
    type t := {
        string : &string;
        start : i64;
        size : i64
    }

    let hash_(arr, sz) := {
        let i := 0;
        let hash := 5381;
        loop {
            if i >= sz then break(hash);
            let sc : int = unsafe_cast(arr[i]);
            hash = (hash * 33) + sc;
    	i = i + 1
        }
    }
    
    let equal_(arr1, sz1, arr2, sz2) := {
        if sz1 != sz2 then false
        else {
            let i := 0;
            loop {
                if i >= sz1 then break(true);
                if arr1[i] != arr2[i] then break(false);
                i = i + 1
            }
        }
    }

    [*
    let hash(t) := hash_(&t^.string^.arr[t^.start], t^.size)
    let equal(t1, t2) := equal_(&t1^.string^.arr[t1^.start], t1^.size, &t2^.string^.arr[t2^.start], t2^.size)
    *]
}

let hash(s) := Slice.hash_(s^.arr, s^.size)
let equal(s1, s2) := Slice.equal_(s1^.arr, s1^.size, s2^.arr, s2^.size)

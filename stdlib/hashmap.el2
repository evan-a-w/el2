open Stdlib
open Primes
open Types

type error :=
  | Not_found
  | Duplicate
  | Failed_allocation

type bucket_state :=
  | Bucket_free
  | Bucket_used
  | Bucket_dead

type bucket(key, data) := {
  state : bucket_state; [* what is in the bucket *]
  hash : i64; [* cache the hash *]
  key : key;
  data : data
}

[* load out of 1000 *]
let max_load := 600
let min_load_after_remove := 100
let min_capacity := 17

type t(key, data) := {
  size : i64;
  capacity : i64;
  buckets : &bucket(key, data);
  hash_fn : &key -> i64;
  compare_fn : (&key, &key) -> bool
}

let create(hash_fn, compare_fn) :=
  #t { size : 0; capacity : 0; buckets : null; hash_fn; compare_fn }
  

let bucket_compare(t, key, h, i) :=
  t^.buckets[i].hash == h && t^.compare_fn(&t^.buckets[i].key, key)

let insert_elements(t, old_buckets, old_capacity, i) := {
  if i >= old_capacity then return(());
  (match old_buckets[i].state with
  | Bucket_used -> { insert(t, old_buckets[i].key, old_buckets[i].data); () }
  | _ -> ());
  insert_elements(t, old_buckets, old_capacity, i + 1)
}

let resize(t, new_capacity) := {
  new_capacity = max(new_capacity, min_capacity);
  new_capacity = nearest_prime(new_capacity);

  let new_buckets := alloc_zeroed(new_capacity, sizeof(t^.buckets[0]));
  if new_buckets == null then return(Err(Failed_allocation));

  let old_buckets := t^.buckets;
  let old_capacity := t^.capacity;

  t^.size = 0;
  t^.capacity = new_capacity;
  t^.buckets = new_buckets;

  insert_elements(t, old_buckets, old_capacity, 0);

  free(old_buckets);
  Ok(())
}

type insert_result(data) :=
  | Insert_duplicate(&data)
  | Inserted(&data)
  | Insert_failed(error)

let insert_loop(t, key, h, cnt, i, found_dead, dead_i)
  : result(i64, &_)
= {
  if cnt >= t^.capacity then return(Ok(if found_dead then dead_i else i));

  match t^.buckets[i].state with
  | Bucket_free -> return(Ok(if found_dead then dead_i else i))
  | Bucket_used -> {
      if bucket_compare(t, &key, h, i) then return(Err(&t^.buckets[i].data))
    }
  | Bucket_dead -> {
      if found_dead == false then {
        found_dead = true;
        dead_i = i;
        ()
      }
    };

  insert_loop(t, key, h, cnt + 1, (i + 1) % t^.capacity, found_dead, dead_i)
}

let insert(t, key, data) : insert_result(_) = {
  let sz := max(t^.size, 1);
  let load := sz * 1000 / max(t^.capacity, 1);
  if load > max_load then {
    match resize(t, sz * 2) with
    | Ok(()) -> ()
    | Err(e) -> return(Insert_failed(e))
  };

  let h := t^.hash_fn(&key);
  let index := h % t^.capacity;
  match insert_loop(t, key, h, 0, index, false, 0) with
  | Err(e) -> Insert_duplicate(e)
  | Ok(i) -> {
      t^.buckets[i].hash = h;
      t^.buckets[i].state = Bucket_used;
      t^.buckets[i].key = key;
      t^.buckets[i].data = data;
      t^.size = t^.size + 1;
      Inserted(&t^.buckets[i].data)
    }
}

let find_bucket(t, key) := {
  let hash := t^.hash_fn(&key);
  if t^.capacity == 0 then null
  else find_helper(t, key, hash, hash % t^.capacity, 0)
}

let find(t, key) := {
  let bucket := find_bucket(t, key);
  if bucket == null then None else Some(bucket^.data)
}

type iterator(key, data) := {
  index : i64;
  t : &t(key, data)
}

let iterator_next(state) := {
  if state^.index >= state^.t^.capacity then
    return(None);
  let i := state^.index;
  state^.index = i + 1;
  match state^.t^.buckets[i].state with
  | Bucket_used -> {
      Some((&state^.t^.buckets[i].key, &state^.t^.buckets[i].data))
    }
  | _ -> iterator_next(state)
}

[* pre: cap != 0 *]
let remove_helper(t, key, initial_index, h, i) := {
  (match t^.buckets[i].state with
  | Bucket_free -> return(None)
  | Bucket_used -> { if bucket_compare(t, &key, h, i) then return(Some(i)) }
  | _ -> ());

  i = (i + 1) % t^.capacity;

  if i == initial_index then
    None
  else
    remove_helper(t, key, initial_index, h, i)
}

let remove(t, key) := {
  if t^.capacity == 0 then return(None);

  let h := t^.hash_fn(&key);
  let i := h % t^.capacity;
  match remove_helper(t, key, i, h, i) with
  | None -> None
  | Some(x) -> {
      let new_load := (t^.size - 1) * 1000 / t^.capacity;
      let min_load := (t^.size - 1) * 1000 / min_capacity;

      if new_load < min_load && new_load < min_load_after_remove then {
        match resize(t, max(t^.size - 1, 1) * 2) with
	| Ok(_) -> return(remove(t, key))
	| _ [* if allocation fails, just don't resize *] -> ()
      };

      let res := t^.buckets[x].data;
      t^.buckets[x].state = Bucket_dead;
      t^.size = t^.size - 1;

      Some(res)
    }
}

let iterator(t) := #iterator { index : 0; t : t }

let destroy(t) := free(t^.buckets)

let bucket_used(state) := match state with | Bucket_used -> true | _ -> false
let bucket_free(state) := match state with | Bucket_free -> true | _ -> false

let find_helper(t, key, hash, i, it) := {
  if it >= t^.capacity || bucket_free(t^.buckets[i].state) == false then
    return(null);
  if bucket_used(t^.buckets[i].state) && bucket_compare(t, &key, hash, i) then
    return(&t^.buckets[i]);
  find_helper(t, key, hash, (i + 1) % t^.capacity, it + 1)
}
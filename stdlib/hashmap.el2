$include(stdlib.el2) &bucket_
$include(primes.el2)
$include(types.el2)

type hashmap_error :=
  | Not_found
  | Duplicate
  | Failed_allocation

type bucket_state :=
  | Bucket_free
  | Bucket_used
  | Bucket_dead

type bucket(key, data) := {
  state : bucket_state; [* what is in the bucket *]
  hash : i64; [* cache the hash *]
  key : key;
  data : data
}

[* load out of 1000 *]
let hashmap_max_load := 600
let hashmap_min_load_after_remove := 100
let hashmap_min_capacity := 17

type hashmap(key, data) := {
  size : i64;
  capacity : i64;
  buckets : &bucket(key, data);
  hash_fn : &key -> i64;
  compare_fn : (&key, &key) -> bool
}

let hashmap_create(hash_fn, compare_fn) :=
  #hashmap { size : 0; capacity : 0; buckets : null; hash_fn; compare_fn }
  

let bucket_compare(t, key, h, i) :=
  t^.buckets[i].hash == h && t^.compare_fn(&t^.buckets[i].key, key)

let hashmap_insert_elements(t, old_buckets, old_capacity, i) := {
  if i >= old_capacity then return(());
  match old_buckets[i].state with
  | Bucket_used -> { hashmap_insert(t, old_buckets[i].key, old_buckets[i].data); () }
  | _ -> ();
  hashmap_insert_elements(t, old_buckets, old_capacity, i + 1)
}

let hashmap_resize(t, new_capacity) := {
  new_capacity = max(new_capacity, hashmap_min_capacity);
  new_capacity = nearest_prime(new_capacity);

  let new_buckets := alloc_zeroed(new_capacity, sizeof(t^.buckets[0]));
  if new_buckets == null then return(Err(Failed_allocation));

  let old_buckets := t^.buckets;
  let old_capacity := t^.capacity;

  t^.size = 0;
  t^.capacity = new_capacity;
  t^.buckets = new_buckets;

  hashmap_insert_elements(t, old_buckets, old_capacity, 0);

  free(old_buckets);
  Ok(())
}

type hashmap_insert_result(data) :=
  | Hashmap_duplicate(&data)
  | Hashmap_inserted(&data)
  | Hashmap_failed(hashmap_error)

let hashmap_insert_loop(t, key, h, cnt, i, found_dead, dead_i)
  : result(i64, &_)
= {
  if cnt > t^.capacity then return(Ok(if found_dead then dead_i else i));

  match t^.buckets[i].state with
  | Bucket_free -> return(Ok(if found_dead then dead_i else i))
  | Bucket_used -> {
      if bucket_compare(t, &key, h, i) then return(Err(&t^.buckets[i].data))
    }
  | Bucket_dead -> {
      if found_dead == false then {
        found_dead = true;
        dead_i = i;
        ()
      }
    };

  hashmap_insert_loop(t, key, h, cnt + 1, (i + 1) % t^.capacity, found_dead, dead_i)
}

let hashmap_insert(t, key, data) : hashmap_insert_result(_) = {
  let sz := min(t^.size, 1);
  let load := sz * 1000 / min(t^.capacity, 1);
  if load > hashmap_max_load then {
    match hashmap_resize(t, sz * 2) with
    | Ok(()) -> ()
    | Err(e) -> return(Hashmap_failed(e))
  };

  let h := t^.hash_fn(&key);
  let index := h % t^.capacity;
  match hashmap_insert_loop(t, key, h, 0, index, false, 0) with
  | Err(e) -> Hashmap_duplicate(e)
  | Ok(i) -> {
      t^.buckets[i].hash = h;
      t^.buckets[i].state = Bucket_used;
      t^.buckets[i].key = key;
      t^.buckets[i].data = data;
      t^.size = t^.size + 1;
      Hashmap_inserted(&t^.buckets[i].data)
    }
}

let hashmap_find(t, key) := {
  let hash := t^.hash_fn(&key);

  hashmap_find_helper(t, key, hash, hash % t^.capacity, 0)
}

type hashmap_iterator(key, data) := {
  index : i64;
  t : &hashmap(key, data)
}

let hashmap_iterator_next(state) := {
  if state^.index >= state^.t^.capacity then
    return(None);
  let i := state^.index;
  match state^.t^.buckets[i].state with
  | Bucket_used -> {
      state^.index = i + 1;
      Some(&state^.t^.buckets[i].data)
    }
  | _ -> hashmap_iterator_next(state)
}

let hashmap_iterator(t) := #hashmap_iterator { index : 0; t : t }

let hashmap_find_helper(t, key, hash, i, it) := {
  if it >= t^.capacity || t^.buckets[i].state != Bucket_free then
    return(null);
  if t^.buckets[i].state == Bucket_used && bucket_compare(t, &key, hash, i) then
    return(&t^.buckets[i]);
  hashmap_find_helper(t, key, hash, (i + 1) % t^.capacity, it + 1)
}

let create_i64(hash_fn : &i64 -> i64, compare_fn : (&i64, &i64) -> bool) : hashmap(i64, unit) = hashmap_create(hash_fn, compare_fn)
let cmp_i64(t : &hashmap(i64, unit), key, h, i) := bucket_compare(t, key, h, i)
let insert_i64(t : &hashmap(i64, i64), key, data) := hashmap_insert(t, key, data)
let resize_i64(t : &hashmap(i64, i64), sz) := hashmap_resize(t, sz)
open Stdlib
open Types

let main() := {
  {
    let t := Hashmap.create(i64_hash, i64_equal);

    Hashmap.insert(&t, 1, 2);
    Hashmap.insert(&t, 7, 9);
    Hashmap.insert(&t, 7, 9);
    Hashmap.insert(&t, 1, 3);
    Hashmap.insert(&t, 2, 3);

    print_hashmap_elements(&Hashmap.iterator(&t));
    print_endline("");

    match Hashmap.remove(&t, 7) with
    | Some(9) -> ()
    | _ -> assert(false);

    print_hashmap_elements(&Hashmap.iterator(&t));
    print_endline("");

    match Hashmap.remove(&t, 1) with
    | Some(2) -> ()
    | _ -> assert(false);

    match Hashmap.remove(&t, 1) with
    | None -> ()
    | _ -> assert(false);

    print_hashmap_elements(&Hashmap.iterator(&t));
    print_endline("");

    match Hashmap.remove(&t, 2) with
    | Some(3) -> ()
    | _ -> assert(false);

    print_hashmap_elements(&Hashmap.iterator(&t));

    Hashmap.destroy(&t)
  };

  [* expected:
     1 2
     7 9
     2 3

     1 2
     2 3

     2 3
  *]

  {
    let t := Hashmap.create(i64_hash, i64_equal);

    Hashmap.insert(&t, 1, ());
    Hashmap.insert(&t, 7, ());
    Hashmap.insert(&t, 7, ());
    Hashmap.insert(&t, 1, ());
    Hashmap.insert(&t, 2, ());

    print_hashmap_elements_unit(&Hashmap.iterator(&t));
    print_endline("");

    match Hashmap.remove(&t, 7) with
    | Some(()) -> ()
    | _ -> assert(false);

    print_hashmap_elements_unit(&Hashmap.iterator(&t));
    print_endline("");

    match Hashmap.remove(&t, 1) with
    | Some(()) -> ()
    | _ -> assert(false);

    print_hashmap_elements_unit(&Hashmap.iterator(&t));
    print_endline("");

    match Hashmap.remove(&t, 2) with
    | Some(()) -> ()
    | _ -> assert(false);

    print_hashmap_elements_unit(&Hashmap.iterator(&t));

    Hashmap.destroy(&t)
  };

  0
}

let test_size := 1000
let random_inserts := 100
let random_max := 1000

let i64_equal(a, b) := a^ == b^
let i64_hash(a) := a^

let print_hashmap_elements(it) := {
  match Hashmap.iterator_next(it) with
  | None -> ()
  | Some((&k, &v)) -> {
      print_int(k);
      print_string(" ");
      print_int(v);
      print_endline("");
      print_hashmap_elements(it)
    }
}

let print_hashmap_elements_unit(it) := {
  match Hashmap.iterator_next(it) with
  | None -> ()
  | Some((&k, &())) -> {
      print_int(k);
      print_hashmap_elements_unit(it)
    }
}

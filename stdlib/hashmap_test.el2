open Stdlib
open Types
open Hashmap

let main() := {
  {
    let t := hashmap_create(i64_hash, i64_equal);

    hashmap_insert(&t, 1, 2);
    hashmap_insert(&t, 7, 9);
    hashmap_insert(&t, 7, 9);
    hashmap_insert(&t, 1, 3);
    hashmap_insert(&t, 2, 3);

    print_hashmap_elements(&hashmap_iterator(&t));
    print_endline("");

    match hashmap_remove(&t, 7) with
    | Some(9) -> ()
    | _ -> assert(false);

    print_hashmap_elements(&hashmap_iterator(&t));
    print_endline("");

    match hashmap_remove(&t, 1) with
    | Some(2) -> ()
    | _ -> assert(false);

    match hashmap_remove(&t, 1) with
    | None -> ()
    | _ -> assert(false);

    print_hashmap_elements(&hashmap_iterator(&t));
    print_endline("");

    match hashmap_remove(&t, 2) with
    | Some(3) -> ()
    | _ -> assert(false);

    print_hashmap_elements(&hashmap_iterator(&t));

    hashmap_destroy(&t)
  };

  [* expected:
     1 2
     7 9
     2 3

     1 2
     2 3

     2 3
  *]

  {
    let t := hashmap_create(i64_hash, i64_equal);

    hashmap_insert(&t, 1, ());
    hashmap_insert(&t, 7, ());
    hashmap_insert(&t, 7, ());
    hashmap_insert(&t, 1, ());
    hashmap_insert(&t, 2, ());

    print_hashmap_elements_unit(&hashmap_iterator(&t));
    print_endline("");

    match hashmap_remove(&t, 7) with
    | Some(()) -> ()
    | _ -> assert(false);

    print_hashmap_elements_unit(&hashmap_iterator(&t));
    print_endline("");

    match hashmap_remove(&t, 1) with
    | Some(()) -> ()
    | _ -> assert(false);

    print_hashmap_elements_unit(&hashmap_iterator(&t));
    print_endline("");

    match hashmap_remove(&t, 2) with
    | Some(()) -> ()
    | _ -> assert(false);

    print_hashmap_elements_unit(&hashmap_iterator(&t));

    hashmap_destroy(&t)
  };

  0
}

let test_size := 1000
let random_inserts := 100
let random_max := 1000

let i64_equal(a, b) := a^ == b^
let i64_hash(a) := a^

let print_int(i) := {
  let curr := i % 10;

  if i / 10 > 0 then print_int(i / 10);

  [* for some reason, chars are a bit borked in parsing so i do this jank string thing *]
  fputc(unsafe_cast(curr + unsafe_cast("0"[0])), stdout)
}

let print_string(s : &char) := {
  if s^ != unsafe_cast(0) then {
    fputc(unsafe_cast(s^), stdout);
    print_string(&s[1])
  }
}


let print_hashmap_elements(it) := {
  match hashmap_iterator_next(it) with
  | None -> ()
  | Some((&k, &v)) -> {
      print_int(k);
      print_string(" ");
      print_int(v);
      print_endline("");
      print_hashmap_elements(it)
    }
}

let print_hashmap_elements_unit(it) := {
  match hashmap_iterator_next(it) with
  | None -> ()
  | Some((&k, &())) -> {
      print_int(k);
      print_hashmap_elements_unit(it)
    }
}

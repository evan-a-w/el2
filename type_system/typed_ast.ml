(* open! Core *)
(* open! Shared *)
(* open! Frontend *)

(* type node = *)
(*   | Literal of Ast.Literal.t * Ty.mono *)
(*   | Tuple of expr list * Ty.mono *)
(*   | Constructor of Uppercase.t * Ty.mono *)
(*   | Record of expr Lowercase.Map.t * Ty.mono *)
(* [@@deriving sexp, equal, hash, compare] *)

(* and let_each = Binding.t * expr [@@deriving sexp, equal, hash, compare] *)

(* and let_def = Rec of let_each list | Nonrec of let_each *)
(* [@@deriving sexp, equal, hash, compare] *)

(* and module_def = *)
(*   | Struct of toplevel list *)
(*   | Named of Uppercase.t Qualified.t *)
(*   | Functor_app of Uppercase.t Qualified.t * module_def list *)
(*   | Module_typed of module_def * module_sig *)
(* [@@deriving sexp, equal, hash, compare] *)

(* and expr = *)
(*   | Node of node *)
(*   | If of expr * expr * expr *)
(*   | Lambda of Binding.t * expr *)
(*   | App of *)
(*       expr *)
(*       * expr (\* these should just be node | App but that makes it more clunky *\) *)
(*   | Let_in of let_def * expr *)
(*   | Match of expr * (Binding.t * expr) list *)
(*   | Typed of expr * Value_tag.t *)
(* [@@deriving sexp, equal, hash, compare] *)
